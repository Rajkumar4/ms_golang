// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: logs.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogserviceClient is the client API for Logservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogserviceClient interface {
	Writelogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type logserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogserviceClient(cc grpc.ClientConnInterface) LogserviceClient {
	return &logserviceClient{cc}
}

func (c *logserviceClient) Writelogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/logs.logservice/Writelogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogserviceServer is the server API for Logservice service.
// All implementations must embed UnimplementedLogserviceServer
// for forward compatibility
type LogserviceServer interface {
	Writelogs(context.Context, *LogRequest) (*LogResponse, error)
	mustEmbedUnimplementedLogserviceServer()
}

// UnimplementedLogserviceServer must be embedded to have forward compatible implementations.
type UnimplementedLogserviceServer struct {
}

func (UnimplementedLogserviceServer) Writelogs(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Writelogs not implemented")
}
func (UnimplementedLogserviceServer) mustEmbedUnimplementedLogserviceServer() {}

// UnsafeLogserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogserviceServer will
// result in compilation errors.
type UnsafeLogserviceServer interface {
	mustEmbedUnimplementedLogserviceServer()
}

func RegisterLogserviceServer(s grpc.ServiceRegistrar, srv LogserviceServer) {
	s.RegisterService(&Logservice_ServiceDesc, srv)
}

func _Logservice_Writelogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogserviceServer).Writelogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logs.logservice/Writelogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogserviceServer).Writelogs(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Logservice_ServiceDesc is the grpc.ServiceDesc for Logservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logs.logservice",
	HandlerType: (*LogserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Writelogs",
			Handler:    _Logservice_Writelogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logs.proto",
}
